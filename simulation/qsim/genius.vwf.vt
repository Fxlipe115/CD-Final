// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/11/2018 03:11:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    genius
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module genius_vlg_sample_tst(
	button_0,
	button_1,
	button_2,
	button_3,
	clk,
	dif,
	rst,
	seed,
	sampler_tx
);
input  button_0;
input  button_1;
input  button_2;
input  button_3;
input  clk;
input [1:0] dif;
input  rst;
input [6:0] seed;
output sampler_tx;

reg sample;
time current_time;
always @(button_0 or button_1 or button_2 or button_3 or clk or dif or rst or seed)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module genius_vlg_check_tst (
	led0,
	led1,
	led2,
	led3,
	score,
	sampler_rx
);
input  led0;
input  led1;
input  led2;
input  led3;
input [4:0] score;
input sampler_rx;

reg  led0_expected;
reg  led1_expected;
reg  led2_expected;
reg  led3_expected;
reg [4:0] score_expected;

reg  led0_prev;
reg  led1_prev;
reg  led2_prev;
reg  led3_prev;
reg [4:0] score_prev;

reg  led0_expected_prev;
reg  led1_expected_prev;
reg  led2_expected_prev;
reg  led3_expected_prev;
reg [4:0] score_expected_prev;

reg  last_led0_exp;
reg  last_led1_exp;
reg  last_led2_exp;
reg  last_led3_exp;
reg [4:0] last_score_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	led0_prev = led0;
	led1_prev = led1;
	led2_prev = led2;
	led3_prev = led3;
	score_prev = score;
end

// update expected /o prevs

always @(trigger)
begin
	led0_expected_prev = led0_expected;
	led1_expected_prev = led1_expected;
	led2_expected_prev = led2_expected;
	led3_expected_prev = led3_expected;
	score_expected_prev = score_expected;
end



// expected led0
initial
begin
	led0_expected = 1'bX;
end 

// expected led1
initial
begin
	led1_expected = 1'bX;
end 

// expected led2
initial
begin
	led2_expected = 1'bX;
end 

// expected led3
initial
begin
	led3_expected = 1'bX;
end 
// expected score[ 4 ]
initial
begin
	score_expected[4] = 1'bX;
end 
// expected score[ 3 ]
initial
begin
	score_expected[3] = 1'bX;
end 
// expected score[ 2 ]
initial
begin
	score_expected[2] = 1'bX;
end 
// expected score[ 1 ]
initial
begin
	score_expected[1] = 1'bX;
end 
// expected score[ 0 ]
initial
begin
	score_expected[0] = 1'bX;
end 
// generate trigger
always @(led0_expected or led0 or led1_expected or led1 or led2_expected or led2 or led3_expected or led3 or score_expected or score)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected led0 = %b | expected led1 = %b | expected led2 = %b | expected led3 = %b | expected score = %b | ",led0_expected_prev,led1_expected_prev,led2_expected_prev,led3_expected_prev,score_expected_prev);
	$display("| real led0 = %b | real led1 = %b | real led2 = %b | real led3 = %b | real score = %b | ",led0_prev,led1_prev,led2_prev,led3_prev,score_prev);
`endif
	if (
		( led0_expected_prev !== 1'bx ) && ( led0_prev !== led0_expected_prev )
		&& ((led0_expected_prev !== last_led0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led0_expected_prev);
		$display ("     Real value = %b", led0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led0_exp = led0_expected_prev;
	end
	if (
		( led1_expected_prev !== 1'bx ) && ( led1_prev !== led1_expected_prev )
		&& ((led1_expected_prev !== last_led1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led1_expected_prev);
		$display ("     Real value = %b", led1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led1_exp = led1_expected_prev;
	end
	if (
		( led2_expected_prev !== 1'bx ) && ( led2_prev !== led2_expected_prev )
		&& ((led2_expected_prev !== last_led2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led2_expected_prev);
		$display ("     Real value = %b", led2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led2_exp = led2_expected_prev;
	end
	if (
		( led3_expected_prev !== 1'bx ) && ( led3_prev !== led3_expected_prev )
		&& ((led3_expected_prev !== last_led3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led3_expected_prev);
		$display ("     Real value = %b", led3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led3_exp = led3_expected_prev;
	end
	if (
		( score_expected_prev[0] !== 1'bx ) && ( score_prev[0] !== score_expected_prev[0] )
		&& ((score_expected_prev[0] !== last_score_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port score[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", score_expected_prev);
		$display ("     Real value = %b", score_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_score_exp[0] = score_expected_prev[0];
	end
	if (
		( score_expected_prev[1] !== 1'bx ) && ( score_prev[1] !== score_expected_prev[1] )
		&& ((score_expected_prev[1] !== last_score_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port score[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", score_expected_prev);
		$display ("     Real value = %b", score_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_score_exp[1] = score_expected_prev[1];
	end
	if (
		( score_expected_prev[2] !== 1'bx ) && ( score_prev[2] !== score_expected_prev[2] )
		&& ((score_expected_prev[2] !== last_score_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port score[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", score_expected_prev);
		$display ("     Real value = %b", score_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_score_exp[2] = score_expected_prev[2];
	end
	if (
		( score_expected_prev[3] !== 1'bx ) && ( score_prev[3] !== score_expected_prev[3] )
		&& ((score_expected_prev[3] !== last_score_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port score[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", score_expected_prev);
		$display ("     Real value = %b", score_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_score_exp[3] = score_expected_prev[3];
	end
	if (
		( score_expected_prev[4] !== 1'bx ) && ( score_prev[4] !== score_expected_prev[4] )
		&& ((score_expected_prev[4] !== last_score_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port score[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", score_expected_prev);
		$display ("     Real value = %b", score_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_score_exp[4] = score_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module genius_vlg_vec_tst();
// constants                                           
// general purpose registers
reg button_0;
reg button_1;
reg button_2;
reg button_3;
reg clk;
reg [1:0] dif;
reg rst;
reg [6:0] seed;
// wires                                               
wire led0;
wire led1;
wire led2;
wire led3;
wire [4:0] score;

wire sampler;                             

// assign statements (if any)                          
genius i1 (
// port map - connection between master ports and signals/registers   
	.button_0(button_0),
	.button_1(button_1),
	.button_2(button_2),
	.button_3(button_3),
	.clk(clk),
	.dif(dif),
	.led0(led0),
	.led1(led1),
	.led2(led2),
	.led3(led3),
	.rst(rst),
	.score(score),
	.seed(seed)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #20000 1'b0;
end 
// seed[ 6 ]
initial
begin
	seed[6] = 1'b0;
end 
// seed[ 5 ]
initial
begin
	seed[5] = 1'b1;
end 
// seed[ 4 ]
initial
begin
	seed[4] = 1'b0;
end 
// seed[ 3 ]
initial
begin
	seed[3] = 1'b0;
end 
// seed[ 2 ]
initial
begin
	seed[2] = 1'b1;
end 
// seed[ 1 ]
initial
begin
	seed[1] = 1'b1;
end 
// seed[ 0 ]
initial
begin
	seed[0] = 1'b0;
end 
// dif[ 1 ]
initial
begin
	dif[1] = 1'b0;
end 
// dif[ 0 ]
initial
begin
	dif[0] = 1'b0;
end 

// button_0
initial
begin
	button_0 = 1'b0;
	button_0 = #860000 1'b1;
	button_0 = #40000 1'b0;
end 

// button_1
initial
begin
	button_1 = 1'b0;
	button_1 = #400000 1'b1;
	button_1 = #60000 1'b0;
	button_1 = #120000 1'b1;
	button_1 = #60000 1'b0;
end 

// button_2
initial
begin
	button_2 = 1'b0;
	button_2 = #660000 1'b1;
	button_2 = #60000 1'b0;
end 

// button_3
initial
begin
	button_3 = 1'b0;
end 

genius_vlg_sample_tst tb_sample (
	.button_0(button_0),
	.button_1(button_1),
	.button_2(button_2),
	.button_3(button_3),
	.clk(clk),
	.dif(dif),
	.rst(rst),
	.seed(seed),
	.sampler_tx(sampler)
);

genius_vlg_check_tst tb_out(
	.led0(led0),
	.led1(led1),
	.led2(led2),
	.led3(led3),
	.score(score),
	.sampler_rx(sampler)
);
endmodule

