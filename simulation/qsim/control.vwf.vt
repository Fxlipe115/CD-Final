// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/09/2018 14:08:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module control_vlg_sample_tst(
	clk,
	difficulty,
	rst,
	sampler_tx
);
input  clk;
input [1:0] difficulty;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or difficulty or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module control_vlg_check_tst (
	l_en,
	l_seed,
	l_sync_reset,
	s_addr,
	s_we,
	sampler_rx
);
input  l_en;
input [6:0] l_seed;
input  l_sync_reset;
input [4:0] s_addr;
input  s_we;
input sampler_rx;

reg  l_en_expected;
reg [6:0] l_seed_expected;
reg  l_sync_reset_expected;
reg [4:0] s_addr_expected;
reg  s_we_expected;

reg  l_en_prev;
reg [6:0] l_seed_prev;
reg  l_sync_reset_prev;
reg [4:0] s_addr_prev;
reg  s_we_prev;

reg  l_en_expected_prev;
reg [6:0] l_seed_expected_prev;
reg  l_sync_reset_expected_prev;
reg [4:0] s_addr_expected_prev;
reg  s_we_expected_prev;

reg  last_l_en_exp;
reg [6:0] last_l_seed_exp;
reg  last_l_sync_reset_exp;
reg [4:0] last_s_addr_exp;
reg  last_s_we_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	l_en_prev = l_en;
	l_seed_prev = l_seed;
	l_sync_reset_prev = l_sync_reset;
	s_addr_prev = s_addr;
	s_we_prev = s_we;
end

// update expected /o prevs

always @(trigger)
begin
	l_en_expected_prev = l_en_expected;
	l_seed_expected_prev = l_seed_expected;
	l_sync_reset_expected_prev = l_sync_reset_expected;
	s_addr_expected_prev = s_addr_expected;
	s_we_expected_prev = s_we_expected;
end


// expected s_addr[ 4 ]
initial
begin
	s_addr_expected[4] = 1'bX;
end 
// expected s_addr[ 3 ]
initial
begin
	s_addr_expected[3] = 1'bX;
end 
// expected s_addr[ 2 ]
initial
begin
	s_addr_expected[2] = 1'bX;
end 
// expected s_addr[ 1 ]
initial
begin
	s_addr_expected[1] = 1'bX;
end 
// expected s_addr[ 0 ]
initial
begin
	s_addr_expected[0] = 1'bX;
end 
// expected l_seed[ 6 ]
initial
begin
	l_seed_expected[6] = 1'bX;
end 
// expected l_seed[ 5 ]
initial
begin
	l_seed_expected[5] = 1'bX;
end 
// expected l_seed[ 4 ]
initial
begin
	l_seed_expected[4] = 1'bX;
end 
// expected l_seed[ 3 ]
initial
begin
	l_seed_expected[3] = 1'bX;
end 
// expected l_seed[ 2 ]
initial
begin
	l_seed_expected[2] = 1'bX;
end 
// expected l_seed[ 1 ]
initial
begin
	l_seed_expected[1] = 1'bX;
end 
// expected l_seed[ 0 ]
initial
begin
	l_seed_expected[0] = 1'bX;
end 

// expected s_we
initial
begin
	s_we_expected = 1'bX;
end 

// expected l_sync_reset
initial
begin
	l_sync_reset_expected = 1'bX;
end 

// expected l_en
initial
begin
	l_en_expected = 1'bX;
end 
// generate trigger
always @(l_en_expected or l_en or l_seed_expected or l_seed or l_sync_reset_expected or l_sync_reset or s_addr_expected or s_addr or s_we_expected or s_we)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected l_en = %b | expected l_seed = %b | expected l_sync_reset = %b | expected s_addr = %b | expected s_we = %b | ",l_en_expected_prev,l_seed_expected_prev,l_sync_reset_expected_prev,s_addr_expected_prev,s_we_expected_prev);
	$display("| real l_en = %b | real l_seed = %b | real l_sync_reset = %b | real s_addr = %b | real s_we = %b | ",l_en_prev,l_seed_prev,l_sync_reset_prev,s_addr_prev,s_we_prev);
`endif
	if (
		( l_en_expected_prev !== 1'bx ) && ( l_en_prev !== l_en_expected_prev )
		&& ((l_en_expected_prev !== last_l_en_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l_en :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l_en_expected_prev);
		$display ("     Real value = %b", l_en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_l_en_exp = l_en_expected_prev;
	end
	if (
		( l_seed_expected_prev[0] !== 1'bx ) && ( l_seed_prev[0] !== l_seed_expected_prev[0] )
		&& ((l_seed_expected_prev[0] !== last_l_seed_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l_seed[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l_seed_expected_prev);
		$display ("     Real value = %b", l_seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_l_seed_exp[0] = l_seed_expected_prev[0];
	end
	if (
		( l_seed_expected_prev[1] !== 1'bx ) && ( l_seed_prev[1] !== l_seed_expected_prev[1] )
		&& ((l_seed_expected_prev[1] !== last_l_seed_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l_seed[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l_seed_expected_prev);
		$display ("     Real value = %b", l_seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_l_seed_exp[1] = l_seed_expected_prev[1];
	end
	if (
		( l_seed_expected_prev[2] !== 1'bx ) && ( l_seed_prev[2] !== l_seed_expected_prev[2] )
		&& ((l_seed_expected_prev[2] !== last_l_seed_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l_seed[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l_seed_expected_prev);
		$display ("     Real value = %b", l_seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_l_seed_exp[2] = l_seed_expected_prev[2];
	end
	if (
		( l_seed_expected_prev[3] !== 1'bx ) && ( l_seed_prev[3] !== l_seed_expected_prev[3] )
		&& ((l_seed_expected_prev[3] !== last_l_seed_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l_seed[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l_seed_expected_prev);
		$display ("     Real value = %b", l_seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_l_seed_exp[3] = l_seed_expected_prev[3];
	end
	if (
		( l_seed_expected_prev[4] !== 1'bx ) && ( l_seed_prev[4] !== l_seed_expected_prev[4] )
		&& ((l_seed_expected_prev[4] !== last_l_seed_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l_seed[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l_seed_expected_prev);
		$display ("     Real value = %b", l_seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_l_seed_exp[4] = l_seed_expected_prev[4];
	end
	if (
		( l_seed_expected_prev[5] !== 1'bx ) && ( l_seed_prev[5] !== l_seed_expected_prev[5] )
		&& ((l_seed_expected_prev[5] !== last_l_seed_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l_seed[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l_seed_expected_prev);
		$display ("     Real value = %b", l_seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_l_seed_exp[5] = l_seed_expected_prev[5];
	end
	if (
		( l_seed_expected_prev[6] !== 1'bx ) && ( l_seed_prev[6] !== l_seed_expected_prev[6] )
		&& ((l_seed_expected_prev[6] !== last_l_seed_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l_seed[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l_seed_expected_prev);
		$display ("     Real value = %b", l_seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_l_seed_exp[6] = l_seed_expected_prev[6];
	end
	if (
		( l_sync_reset_expected_prev !== 1'bx ) && ( l_sync_reset_prev !== l_sync_reset_expected_prev )
		&& ((l_sync_reset_expected_prev !== last_l_sync_reset_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l_sync_reset :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l_sync_reset_expected_prev);
		$display ("     Real value = %b", l_sync_reset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_l_sync_reset_exp = l_sync_reset_expected_prev;
	end
	if (
		( s_addr_expected_prev[0] !== 1'bx ) && ( s_addr_prev[0] !== s_addr_expected_prev[0] )
		&& ((s_addr_expected_prev[0] !== last_s_addr_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_addr_expected_prev);
		$display ("     Real value = %b", s_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_addr_exp[0] = s_addr_expected_prev[0];
	end
	if (
		( s_addr_expected_prev[1] !== 1'bx ) && ( s_addr_prev[1] !== s_addr_expected_prev[1] )
		&& ((s_addr_expected_prev[1] !== last_s_addr_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_addr_expected_prev);
		$display ("     Real value = %b", s_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_addr_exp[1] = s_addr_expected_prev[1];
	end
	if (
		( s_addr_expected_prev[2] !== 1'bx ) && ( s_addr_prev[2] !== s_addr_expected_prev[2] )
		&& ((s_addr_expected_prev[2] !== last_s_addr_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_addr_expected_prev);
		$display ("     Real value = %b", s_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_addr_exp[2] = s_addr_expected_prev[2];
	end
	if (
		( s_addr_expected_prev[3] !== 1'bx ) && ( s_addr_prev[3] !== s_addr_expected_prev[3] )
		&& ((s_addr_expected_prev[3] !== last_s_addr_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_addr_expected_prev);
		$display ("     Real value = %b", s_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_addr_exp[3] = s_addr_expected_prev[3];
	end
	if (
		( s_addr_expected_prev[4] !== 1'bx ) && ( s_addr_prev[4] !== s_addr_expected_prev[4] )
		&& ((s_addr_expected_prev[4] !== last_s_addr_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_addr_expected_prev);
		$display ("     Real value = %b", s_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_addr_exp[4] = s_addr_expected_prev[4];
	end
	if (
		( s_we_expected_prev !== 1'bx ) && ( s_we_prev !== s_we_expected_prev )
		&& ((s_we_expected_prev !== last_s_we_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_we :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_we_expected_prev);
		$display ("     Real value = %b", s_we_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_s_we_exp = s_we_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [1:0] difficulty;
reg rst;
// wires                                               
wire l_en;
wire [6:0] l_seed;
wire l_sync_reset;
wire [4:0] s_addr;
wire s_we;

wire sampler;                             

// assign statements (if any)                          
control i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.difficulty(difficulty),
	.l_en(l_en),
	.l_seed(l_seed),
	.l_sync_reset(l_sync_reset),
	.rst(rst),
	.s_addr(s_addr),
	.s_we(s_we)
);

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #80000 1'b0;
end 
// difficulty[ 1 ]
initial
begin
	difficulty[1] = 1'b0;
end 
// difficulty[ 0 ]
initial
begin
	difficulty[0] = 1'b1;
end 

control_vlg_sample_tst tb_sample (
	.clk(clk),
	.difficulty(difficulty),
	.rst(rst),
	.sampler_tx(sampler)
);

control_vlg_check_tst tb_out(
	.l_en(l_en),
	.l_seed(l_seed),
	.l_sync_reset(l_sync_reset),
	.s_addr(s_addr),
	.s_we(s_we),
	.sampler_rx(sampler)
);
endmodule

